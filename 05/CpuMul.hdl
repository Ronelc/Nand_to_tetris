// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/

// This chip is an extension of the regular CPU that uses the extended ALU.
// If instruction[15]==0 or (instruction[14] and instruction[13] equals 1)
// the CpuMul behave exactly as the same as the regular CPU.
// If the instruction is a c-instruction and instruction[14] == 0, the chip will 
// behave as follows:
//  Instruction  | 12 | 11 | 10 |
// ______________________________
// dest=D<<;jump | 0  | 1  | 1  |
// dest=A<<;jump | 0  | 1  | 0  |
// dest=M<<;jump | 1  | 1  | 0  |
// dest=D>>;jump | 0  | 0  | 1  |
// dest=A>>;jump | 0  | 0  | 0  |
// dest=M>>;jump | 1  | 0  | 0  |

CHIP CpuMul {
    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).
    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction
    
    PARTS:


// the first Mux - choose A or C command.
	Mux16(a=instruction , b= ALUOut, sel =instruction[15] , out = muxOut);

// check if need to open A register.
	Mux(a= true, b=instruction[5] , sel= instruction[15], out =openA );
	ARegister(in =  muxOut, load = openA , out = Aout, out[0..14]= addressM);

	Mux16(a=Aout , b = inM, sel =instruction[12] , out = mux2Out);

// check if need to open D register.
	And(a = instruction[4], b = instruction[15], out = openD);
	DRegister(in =  ALUOut, load =openD, out = Dout);

//the ExtendALU 
	ExtendAlu(x=Dout, y=mux2Out, instruction = instruction[6..14], out=ALUOut, out = outM, zr=zr,ng=ng);

// check if need to open writeM register.
	And(a= instruction[3], b=instruction[15], out = writeM);


// calculates what should be put into the pc bit, acording to the jamp bits.
    	Or(a = ng, b = zr, out = ngOzr);
    	Not(in = ngOzr, out = pos);
    	And(a = pos, b = instruction[0], out = GT);
    	And(a = zr, b = instruction[1], out = EQ);
    	And(a = ng, b = instruction[2], out = LT);
    	Or(a = GT, b = EQ, out = GE);
    	Or(a = GE, b = LT, out = GEL);
    	And(a = GEL, b = instruction[15], out = PCLoad);

// fils the value into the pc register 
	PC(in = Aout, load =PCLoad , inc = true, reset = reset, out[0..14] = pc);
}
